[{"title":"Hello World","url":"/2021/06/27/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","tags":["tag0","tag1"]},{"title":"基础环境配置","url":"/2021/06/20/2021-06-20-basic-dev-env/","content":"\n## 安装Homebrew \nhttps://brew.sh/index_zh-cn\n\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n## jdk 安装\njdk1.8下载地址\nhttps://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\n\n查看安装路径：/usr/libexec/java_home -V\n\n默认安装路径：/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home\n\n进入 ～目录\n\n编辑.bash_profile，加入以下内容\n```\nJAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home\n\nPATH=$JAVA\\_HOME/bin:$PATH:.\n\nCLASSPATH=$JAVA\\_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.\n\nexport JAVA_HOME\n\nexport PATH\n\nexport CLASSPATH\n```\n执行 source ~/.bash_profile  使配置生效。\n\n查看 java 版本：java -version\n\n## gradle 安装\n#### 使用 brew 安装 gradle\n```\nbrew install gradle\n```\n\n#### 查看 gradle 版本\n```\ngradle -v\n```\n\n## git 安装\n#### 使用 brew 安装 git\n```\nbrew install git\n```\n\n#### 配置用户信息\n```\ngit config --global user.name yourName\ngit config --global user.email yourEmail\n```\n\n#### 配置ssh\n查看是否有ssh配置\n```\ncd ~/.ssh\n```\n\n生成ssh\n```\nssh-keygen -t rsa -C \"yourEmail\"\n```\n会在 .ssh 下生成 id_rsa 和 id_rsa.pub\n\n将 id_rsa.pub 中的内容配置在github中\n\n## docker 安装\n#### 使用 brew 安装\n```\nbrew install --cask docker\n```\n\n#### 下载安装\nhttps://hub.docker.com/editions/community/docker-ce-desktop-mac\n\n## 使用zsh\n安装 oh-my-zsh\n```\ngit clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh\n```\n\n目录下没有.zshrc\n```\ntouch .zshrc\ncp ~/.zshrc   ~/.zshrc.orig\n```\n\n创建zsh配置文件\n```\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n```\n\n配置兼容bash环境变量\n```\n.zshrc 文件中添加source ~/.bash_profile\n```\n\n修改默认shell\n```\nchsh -s /bin/zsh\n```\n修改zsh主题\n.zshrc 文件 添加 ZSH_THEME=gnzh\n\n"},{"title":"阿里云人机校验","url":"/2021/05/29/2021-05-29-aliyun-captcha/","content":"\n## 阿里云人机校验（滑动校验）\n[官方文档](https://help.aliyun.com/document_detail/121893.html?spm=5176.2020520162.0.dexternal.73285fb0WkhLIZ)\n\n### 验证流程\n- 客户端 -> 阿里云服务器：获取验签所需参数\n- 客户端 -> 应用服务器：验证所需参数和业务代码\n- 应用服务器 -> 阿里云服务器：验签\n\n### 配置\n#### 创建AccessKey\n访问密钥AccessKey（AK）相当于登录密码，只是使用场景不同。\n\nAccessKey用于程序方式调用云服务API，而登录密码用于登录控制台。\n- AccessKey ID用于标识用户。\n- AccessKey Secret是用来验证用户的密钥。AccessKey Secret必须保密。\n\n#### 添加captcha配置\n- 配置名称（后期可修改）\n- 高峰期OPS（貌似随便填）\n- 业务类型 + 验证方式 + 使用场景 （组成一个配置，也就是最多可以有2 * 3 * 6个配置，配置成功后不可删除）\nps：配置不可删除，不使用，不付费。\nps：自2020年9月起，阿里云人机验证服务接入集成模块已升级为新版，需使用新版代码集成。\n\n\n### 前端代码集成\n#### 引入js包\n```html\n    <script src=\"https://g.alicdn.com/AWSC/AWSC/awsc.js\"></script>\n```\n\n#### 标识dom\n```html\n    <div id=\"nc\"></div>\n```\n#### 初始化滑块\n```js\n    // 实例化nc\n    AWSC.use(\"nc\", function (state, module) {\n        // state标识状态，首次实例化会加载外部js，timeout为获取超时，loaded为已加载\n        if (state === 'timeout') {\n            console.log('nc timeout')\n        }\n\n        // 初始化\n        const nc = module.init({\n            // 应用类型标识,配置管理页签可找到对应的appkey值\n            appkey: \"CF_APP_1\",\n            //使用场景标识，配置管理页签可找到对应的scene值\n            scene: \"register\",\n            // 声明滑动验证需要渲染的目标ID。\n            renderTo: \"nc\",\n            //前端滑动验证通过时会触发该回调参数。会话ID（sessionId）、签名串（sig）、请求唯一标识（token）需随业务请求一同发送至端验签\n            success: function (data) {\n                window.console && console.log(data.sessionId)\n                window.console && console.log(data.sig)\n                window.console && console.log(data.token)\n            },\n            // 滑动验证失败时触发该回调参数。\n            fail: function (failCode) {\n                 window.console && console.log(failCode)\n            },\n            // 验证码加载出现异常时触发该回调参数。\n            error: function (errorCode) {\n                 window.console && console.log(errorCode)\n            }\n        });\n\n```\n#### 其他参数\n- language，语言，默认cn\n- width，滑动条宽度，默认300\n- height，滑动条高度（亲测未生效），默认34\n- fontSize，字体大小，默认12\n- hideErrorCode，隐藏验证时的错误码，默认false\n- upLang，自定义文案\n- test，用于测试验证码的不同状态（module.TEST_PASS，module.TEST_BLOCK\n\n#### nc对象\n- reset\n- hide\n- show\n\n### 后端代码集成\n#### 引入依赖\n```gradle\n    compile 'com.aliyun:aliyun-java-sdk-core:4.5.1'\n    compile 'com.aliyun:aliyun-java-sdk-afs:1.0.1'\n```\n\n```java\n    public class CaptchaService {\n    public static final String PRODUCT = \"afs\";\n    public static final String END_POINT = \"afs.aliyuncs.com\";\n\n    @Value(\"${aliyun.captcha.region-id}\")\n    private String regionId;\n\n    @Value(\"${aliyun.captcha.access-key-id}\")\n    private String accessKeyId;\n\n    @Value(\"${aliyun.captcha.access-key-secret}\")\n    private String accessKeySecret;\n\n    @Value(\"${captcha.enabled}\")\n    private boolean captchaEnabled;\n\n    private IAcsClient client;\n\n    public IAcsClient getClient() {\n        if (client == null) {\n            IClientProfile profile =\n                    DefaultProfile.getProfile(regionId, accessKeyId, accessKeySecret);\n            client = new DefaultAcsClient(profile);\n            DefaultProfile.addEndpoint(regionId, PRODUCT, END_POINT);\n        }\n\n        return client;\n    }\n\n    public void verify(HttpServletRequest httpRequest, CaptchaVerifyRequest captchaVerify) {\n        if (!captchaEnabled) {\n            return;\n        }\n\n        if (null == captchaVerify) {\n            throw UnauthorizedException.unauthorized(\"captcha_verify_empty\");\n        }\n\n        AuthenticateSigRequest request = new AuthenticateSigRequest();\n        request.setSessionId(captchaVerify.getSessionId()); // 会话ID。必填参数，从前端获取，不可更改。\n        request.setSig(captchaVerify.getSig()); // 签名串。必填参数，从前端获取，不可更改。\n        request.setToken(captchaVerify.getToken()); // 请求唯一标识。必填参数，从前端获取，不可更改。\n        request.setScene(captchaVerify.getScene()); // 场景标识。必填参数，从前端获取，不可更改。\n        request.setAppKey(captchaVerify.getAppKey()); // 应用类型标识。必填参数，后端填写。\n        request.setRemoteIp(IpUtils.getRealIpAddress(httpRequest)); // 客户端IP。必填参数，后端填写。\n\n\n        try {\n            // response的code枚举：100验签通过，900验签失败\n            AuthenticateSigResponse response = getClient().getAcsResponse(request);\n\n            if (!response.getCode().equals(100)) {\n                log.info(response.getMsg());\n            }\n        } catch (ClientException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n\n```","tags":["第三方集成"]}]